trigger:
  tags:
    include:
        - '@diageo/northamerica_com@*'

parameters:
  - name: Environment
    displayName: Environment
    type: string
    default: 'UAT'
    values:
    - Development
    - Staging
    - Production
    - UAT

resources:
  - repo: self

pool:
  vmImage: ubuntu-latest

variables:
  - group: NAM_${{ parameters.Environment }}
  - name: workdir
    value: websites/diageonorthamerica.com
  - name: dockerfile
    value: "$(workdir)/Dockerfile"

stages:
  - stage: Build
    displayName: Build image
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DownloadSecureFile@1
            name: envfile
            displayName: 'Download .env'
            inputs:
              secureFile: '$(EnvFileName)'
          - task: CmdLine@2
            displayName: Pass secure file to build
            inputs:
              script: |
                cp -f $(envfile.secureFilePath) $(workdir)/.env.local
          - task: Docker@2
            displayName: Build docker image
            inputs:
              repository: '$(TargetRepoName)'
              command: 'build'
              Dockerfile: '$(dockerfile)'
              buildContext: '.'
              
        # ECRPushImage@1 accepts only exact region name and we can't use variable here. 
        # That's why we have a duplicate of the push image steps.
          # Development/UAT
          - task: ECRPushImage@1
            displayName: Push docker image to ECR (Development/UAT)
            condition: or(eq('${{ parameters.Environment }}', 'Development'), eq('${{ parameters.Environment }}', 'UAT'))
            inputs:
              awsCredentials: '$(AWSServiceConnectionName)'
              regionName: 'eu-west-2'
              imageSource: 'imagename'
              sourceImageName: '$(TargetRepoName)'
              sourceImageTag: '$(Build.BuildId)'
              repositoryName: '$(TargetRepoName)'
              pushTag: '$(Build.BuildId)'
          - task: ECRPushImage@1
            displayName: Push docker image to ECR with the latest tag (Development/UAT)
            condition: or(eq('${{ parameters.Environment }}', 'Development'), eq('${{ parameters.Environment }}', 'UAT'))
            inputs:
              awsCredentials: '$(AWSServiceConnectionName)'
              regionName: 'eu-west-2'
              imageSource: 'imagename'
              sourceImageName: '$(TargetRepoName)'
              sourceImageTag: '$(Build.BuildId)'
              repositoryName: '$(TargetRepoName)'
              pushTag: 'latest'
          # Staging and production
          - task: ECRPushImage@1
            displayName: Push docker image to ECR (Staging/Production)
            condition: or(eq('${{ parameters.Environment }}', 'Staging'), eq('${{ parameters.Environment }}', 'Production'))
            inputs:
              awsCredentials: '$(AWSServiceConnectionName)'
              regionName: 'eu-west-1'
              imageSource: 'imagename'
              sourceImageName: '$(TargetRepoName)'
              sourceImageTag: '$(Build.BuildId)'
              repositoryName: '$(TargetRepoName)'
              pushTag: '$(Build.BuildId)'
          - task: ECRPushImage@1
            displayName: Push docker image to ECR with the latest tag (Staging/Production)
            condition: or(eq('${{ parameters.Environment }}', 'Staging'), eq('${{ parameters.Environment }}', 'Production'))
            inputs:
              awsCredentials: '$(AWSServiceConnectionName)'
              regionName: 'eu-west-1'
              imageSource: 'imagename'
              sourceImageName: '$(TargetRepoName)'
              sourceImageTag: '$(Build.BuildId)'
              repositoryName: '$(TargetRepoName)'
              pushTag: 'latest'

  - stage: Deploy_UAT
    displayName: Deploy to UAT
    condition: and(succeeded(), eq('${{ parameters.Environment }}', 'UAT'))
    dependsOn: Build
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: UAT
        strategy:
              runOnce:
                  deploy:
                      steps:
                        - task: AWSCLI@1
                          displayName: Deploy task to ECS cluster
                          inputs:
                            awsCredentials: '$(AWSServiceConnectionName)'
                            regionName: 'eu-west-2'
                            awsCommand: 'ecs'
                            awsSubCommand: 'update-service'
                            awsArguments: '--cluster diageo-frontend-dev-cluster --service diageo-nam-fe-uat-service --desired-count 1 --task-definition diageo-nam-fe-uat-td --force-new-deployment --region eu-west-2'

  - stage: Deploy_Staging
    displayName: Deploy to Staging
    condition: and(succeeded(), eq('${{ parameters.Environment }}', 'Staging'))
    dependsOn: Build
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: Staging
        strategy:
              runOnce:
                  deploy:
                      steps:
                        - task: AWSCLI@1
                          displayName: Deploy task to ECS cluster
                          inputs:
                            awsCredentials: '$(AWSServiceConnectionName)'
                            regionName: 'eu-west-1'
                            awsCommand: 'ecs'
                            awsSubCommand: 'update-service'
                            awsArguments: '--cluster HZNNEWDIAGEOFRONTENDNA-STG --service HZNNEWDIAGEOFRONTENDNA-STG --desired-count 1 --task-definition HZNNEWDIAGEOFRONTENDNA-STG --force-new-deployment --region eu-west-1'

  # - stage: Deploy_Production
  #   displayName: Deploy to Production
  #   condition: and(succeeded(), eq('${{ parameters.Environment }}', 'Production'))
  #   dependsOn: Build
  #   jobs:
  #     - deployment: Deploy
  #       displayName: Deploy
  #       environment: Production
  #       strategy:
  #             runOnce:
  #                 deploy:
  #                     steps:
  #                       - task: AWSCLI@1
  #                         displayName: Deploy task to ECS cluster
  #                         inputs:
  #                           awsCredentials: '$(AWSServiceConnectionName)'
  #                           regionName: 'eu-west-1'
  #                           awsCommand: 'ecs'
  #                           awsSubCommand: 'update-service'
  #                           awsArguments: '--cluster HZNNEWDIAGEOFRONTENDNA-PRD --service HZNNEWDIAGEOFRONTENDNA-PRD --desired-count 1 --task-definition HZNNEWDIAGEOFRONTENDNA-PRD --force-new-deployment --region eu-west-1'
